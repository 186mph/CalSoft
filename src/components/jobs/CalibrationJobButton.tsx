import React, { useState, useEffect, useRef } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/Dialog';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Textarea } from '@/components/ui/Textarea';
import { SelectRoot, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/Select';
import { Plus, Search, ChevronDown, ChevronUp, X, Check } from 'lucide-react';
import { supabase } from '@/lib/supabase';
import { useAuth } from '@/lib/AuthContext';
import { useDivision } from '@/App';
import { getDivisionAccentClasses } from '@/lib/utils';
import { toast } from '@/components/ui/toast';

interface CalibrationJobButtonProps {
  onJobCreated?: () => void;
  buttonText?: string;
  division?: 'calibration' | 'armadillo';
}

export function CalibrationJobButton({ 
  onJobCreated, 
  buttonText = "New Lab Job",
  division 
}: CalibrationJobButtonProps) {
  console.log('[CalibrationJobButton] Component rendering with props:', { buttonText, division, onJobCreated: !!onJobCreated });
  console.log('ðŸ”§ CalibrationJobButton: Dialog title will be "Create New Project"');
  
  const [showDialog, setShowDialog] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [customers, setCustomers] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [customerSearchQuery, setCustomerSearchQuery] = useState('');
  const [isCustomerDropdownOpen, setIsCustomerDropdownOpen] = useState(false);
  const customerDropdownRef = useRef<HTMLDivElement>(null);
  const [isEquipmentDropdownOpen, setIsEquipmentDropdownOpen] = useState(false);
  const equipmentDropdownRef = useRef<HTMLDivElement>(null);
  const [technicians, setTechnicians] = useState<any[]>([]);
  const [isTechnicianDropdownOpen, setIsTechnicianDropdownOpen] = useState(false);
  const technicianDropdownRef = useRef<HTMLDivElement>(null);
  const { user } = useAuth();
  const { division: appDivision } = useDivision();

  // Determine division from buttonText if not explicitly provided
  const getJobDivision = () => {
    if (division) return division;
    if (buttonText?.toLowerCase().includes('armadillo')) return 'armadillo';
    return 'calibration'; // Default to calibration
  };

  const jobDivision = getJobDivision();

  // Form state
  const [formData, setFormData] = useState({
    customer_id: '',
    description: '',
    start_date: new Date().toISOString().split('T')[0],
    due_date: '',
    priority: '7-day',
    notes: '',
    job_type: '',
    equipment_types: [] as string[],
    technicians: [] as string[]
  });

  // State for generated job number
  // Job number will be generated by database trigger

  // Auto-generate job number when dialog opens for both calibration and armadillo divisions
  // Job number will be generated by database trigger when job is created

  // Fetch technicians from auth.users or admin API
  const fetchTechnicians = async () => {
    try {
      console.log('[CalibrationJobButton] Fetching technicians from common.profiles...');
      const { data, error } = await supabase
        .schema('common')
        .from('profiles')
        .select('id, email, name, division, role')
        .eq('role', 'Lab Technician')
        .order('name', { ascending: true });

      if (error) {
        console.error('[CalibrationJobButton] Error fetching technicians from profiles:', error);
        setTechnicians([]);
        return;
      }

      const formattedUsers = (data || []).map((u: any) => ({
        id: u.id,
        email: u.email,
        name: u.name || u.email,
        user_metadata: { name: u.name, division: u.division, role: u.role }
      }));

      const filteredUsers = jobDivision
        ? formattedUsers.filter(u => u.user_metadata?.division === jobDivision)
        : formattedUsers;

      console.log('[CalibrationJobButton] Technicians loaded:', filteredUsers.length);
      setTechnicians(filteredUsers);
    } catch (err) {
      console.error('[CalibrationJobButton] Exception in fetchTechnicians:', err);
      setTechnicians([]);
    }
  };

  // Fetch calibration customers from lab_ops.lab_customers
  const fetchCustomers = async () => {
    try {
      console.log('[CalibrationJobButton] Fetching customers from lab_ops.lab_customers...');
      setLoading(true);
      
      // First try to get customers from lab_customers
      const { data: labCustomers, error: labError } = await supabase
        .schema('lab_ops')
        .from('lab_customers')
        .select('*')
        .eq('status', 'active')
        .order('company_name', { ascending: true });

      console.log('[CalibrationJobButton] Lab customers query result:', { 
        count: labCustomers?.length || 0, 
        labError,
        customers: labCustomers?.map(c => ({ id: c.id, name: c.name, company_name: c.company_name }))
      });

      if (labError) {
        console.log('[CalibrationJobButton] Error with lab_customers:', labError);
        // If lab_customers doesn't exist or has error, fallback to common.customers
        const { data: commonCustomers, error: commonError } = await supabase
          .schema('common')
          .from('customers')
          .select('*')
          .eq('status', 'active')
          .order('company_name', { ascending: true });

        if (commonError) {
          console.error('[CalibrationJobButton] Error with common.customers:', commonError);
          throw commonError;
        }

        console.log('[CalibrationJobButton] Using common customers as fallback:', {
          count: commonCustomers?.length || 0,
          customers: commonCustomers?.map(c => ({ id: c.id, name: c.name, company_name: c.company_name }))
        });
        setCustomers(commonCustomers || []);
        return;
      }

      // If we have lab customers but the list is empty, try to populate from common customers
      if (!labCustomers || labCustomers.length === 0) {
        console.log('[CalibrationJobButton] No lab customers found, trying to populate from common.customers...');
        
        const { data: commonCustomers, error: commonError } = await supabase
          .schema('common')
          .from('customers')
          .select('*')
          .eq('status', 'active')
          .limit(10); // Get first 10 to avoid overwhelming

        if (commonError) {
          console.log('[CalibrationJobButton] Error fetching common customers:', commonError);
          setCustomers([]);
          return;
        }

        console.log('[CalibrationJobButton] Found common customers for population:', {
          count: commonCustomers?.length || 0,
          customers: commonCustomers?.map(c => ({ id: c.id, name: c.name, company_name: c.company_name }))
        });

        if (commonCustomers && commonCustomers.length > 0) {
          console.log('[CalibrationJobButton] Found common customers, copying to lab_customers...');
          
          // Copy customers to lab_customers table
          const insertPromises = commonCustomers.map(async (customer) => {
            try {
              console.log('[CalibrationJobButton] Inserting customer:', customer.id, customer.company_name);
              const { data: insertedData, error: insertError } = await supabase
                .schema('lab_ops')
                .from('lab_customers')
                .insert({
                  id: customer.id,
                  name: customer.name,
                  company_name: customer.company_name,
                  address: customer.address,
                  phone: customer.phone,
                  email: customer.email,
                  status: customer.status || 'active'
                })
                .select()
                .single();

              if (insertError && insertError.code !== '23505') { // Ignore duplicate key errors
                console.log('[CalibrationJobButton] Error inserting customer:', customer.id, insertError);
              } else {
                console.log('[CalibrationJobButton] Successfully inserted customer:', customer.id);
              }
              return insertedData;
            } catch (insertError) {
              console.log('[CalibrationJobButton] Exception inserting customer:', customer.id, insertError);
              return null;
            }
          });

          await Promise.all(insertPromises);

          // Now fetch the lab customers again
          const { data: newLabCustomers, error: newLabError } = await supabase
            .schema('lab_ops')
            .from('lab_customers')
            .select('*')
            .eq('status', 'active')
            .order('company_name', { ascending: true });

          if (newLabError) {
            console.log('[CalibrationJobButton] Error refetching lab customers:', newLabError);
            setCustomers(commonCustomers || []);
          } else {
            console.log('[CalibrationJobButton] Successfully populated lab customers:', {
              count: newLabCustomers?.length || 0,
              customers: newLabCustomers?.map(c => ({ id: c.id, name: c.name, company_name: c.company_name }))
            });
            setCustomers(newLabCustomers || []);
          }
        } else {
          console.log('[CalibrationJobButton] No customers found in common.customers either');
          setCustomers([]);
        }
      } else {
        console.log('[CalibrationJobButton] Found existing lab customers:', {
          count: labCustomers?.length || 0,
          customers: labCustomers?.map(c => ({ id: c.id, name: c.name, company_name: c.company_name }))
        });
        setCustomers(labCustomers || []);
      }
    } catch (err) {
      console.error('[CalibrationJobButton] Error in fetchCustomers:', err);
      toast({
        title: "Error",
        description: "Failed to load customers",
        variant: "destructive"
      });
      setCustomers([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    console.log('[CalibrationJobButton] Dialog state changed:', showDialog);
    if (showDialog) {
      fetchCustomers();
      fetchTechnicians();
    }
  }, [showDialog]);

  // Handle clicking outside the customer, equipment, and technician dropdowns
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (customerDropdownRef.current && !customerDropdownRef.current.contains(event.target as Node)) {
        setIsCustomerDropdownOpen(false);
      }
      if (equipmentDropdownRef.current && !equipmentDropdownRef.current.contains(event.target as Node)) {
        setIsEquipmentDropdownOpen(false);
      }
      if (technicianDropdownRef.current && !technicianDropdownRef.current.contains(event.target as Node)) {
        setIsTechnicianDropdownOpen(false);
      }
    }
    
    if (isCustomerDropdownOpen || isEquipmentDropdownOpen || isTechnicianDropdownOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isCustomerDropdownOpen, isEquipmentDropdownOpen, isTechnicianDropdownOpen]);

  // Filter customers based on search query
  const getFilteredCustomers = () => {
    if (!customerSearchQuery.trim()) {
      return customers;
    }
    
    return customers.filter(customer => {
      const companyName = customer.company_name?.toLowerCase() || '';
      const name = customer.name?.toLowerCase() || '';
      const searchTerm = customerSearchQuery.toLowerCase();
      return companyName.includes(searchTerm) || name.includes(searchTerm);
    });
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (field: string) => (value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  // Helper function to get selected customer display name
  const getSelectedCustomerName = (customerId: string) => {
    if (!customerId) return 'Select Customer';
    const customer = customers.find(c => c.id === customerId);
    return customer?.company_name || customer?.name || 'Select Customer';
  };

  // Handle customer search input change
  const handleCustomerSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setCustomerSearchQuery(e.target.value);
    setIsCustomerDropdownOpen(true);
  };

  // Handle customer selection
  const handleCustomerSelect = (customer: any) => {
    setFormData(prev => ({ ...prev, customer_id: customer.id }));
    setCustomerSearchQuery(customer.company_name || customer.name || '');
    setIsCustomerDropdownOpen(false);
  };

  // Handle customer search input focus
  const handleCustomerSearchFocus = () => {
    setIsCustomerDropdownOpen(true);
    if (!customerSearchQuery && formData.customer_id) {
      // If there's a selected customer but no search query, populate with selected customer name
      const selectedCustomer = customers.find(c => c.id === formData.customer_id);
      if (selectedCustomer) {
        setCustomerSearchQuery(selectedCustomer.company_name || selectedCustomer.name || '');
      }
    }
  };

  // Handle keyboard navigation in customer search
  const handleCustomerSearchKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Escape') {
      setIsCustomerDropdownOpen(false);
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      setIsCustomerDropdownOpen(true);
    }
  };

  // Handle clearing customer selection
  const handleClearCustomer = () => {
    setFormData(prev => ({ ...prev, customer_id: '' }));
    setCustomerSearchQuery('');
    setIsCustomerDropdownOpen(false);
  };

  // Initialize customer search query when customer is selected
  useEffect(() => {
    if (formData.customer_id && customers.length > 0 && !customerSearchQuery) {
      const selectedCustomer = customers.find(c => c.id === formData.customer_id);
      if (selectedCustomer) {
        setCustomerSearchQuery(selectedCustomer.company_name || selectedCustomer.name || '');
      }
    }
  }, [formData.customer_id, customers]);

  // Equipment types options
  const equipmentTypes = [
    'Gloves',
    'Sleeves', 
    'Blankets',
    'Live-Line Tools',
    'Line Hose',
    'Ground Cables',
    'Meters',
    'Torques',
    'Bucket Trucks',
    'Diggers/Derek'
  ];



  // Handle equipment type selection
  const handleEquipmentTypeToggle = (equipmentType: string) => {
    setFormData(prev => {
      const currentTypes = prev.equipment_types || [];
      const isSelected = currentTypes.includes(equipmentType);
      
      if (isSelected) {
        return {
          ...prev,
          equipment_types: currentTypes.filter(type => type !== equipmentType)
        };
      } else {
        return {
          ...prev,
          equipment_types: [...currentTypes, equipmentType]
        };
      }
    });
  };

  // Get display text for equipment types
  const getEquipmentTypesDisplay = () => {
    if (!formData.equipment_types || formData.equipment_types.length === 0) {
      return 'Select equipment types...';
    }
    if (formData.equipment_types.length === 1) {
      return formData.equipment_types[0];
    }
    return `${formData.equipment_types.length} types selected`;
  };

  // Handle technician selection
  const handleTechnicianToggle = (technicianId: string) => {
    setFormData(prev => {
      const currentTechnicians = prev.technicians || [];
      const isSelected = currentTechnicians.includes(technicianId);
      
      if (isSelected) {
        return {
          ...prev,
          technicians: currentTechnicians.filter(id => id !== technicianId)
        };
      } else {
        return {
          ...prev,
          technicians: [...currentTechnicians, technicianId]
        };
      }
    });
  };

  // Handle select all technicians
  const handleSelectAllTechnicians = () => {
    setFormData(prev => {
      const allTechnicianIds = technicians.map(tech => tech.id);
      const currentTechnicians = prev.technicians || [];
      
      // If all are selected, clear all. Otherwise, select all
      const allSelected = allTechnicianIds.every(id => currentTechnicians.includes(id));
      
      return {
        ...prev,
        technicians: allSelected ? [] : allTechnicianIds
      };
    });
  };

  // Get display text for technicians
  const getTechniciansDisplay = () => {
    if (!formData.technicians || formData.technicians.length === 0) {
      return 'Select technicians...';
    }
    if (formData.technicians.length === 1) {
      const tech = technicians.find(t => t.id === formData.technicians[0]);
      return tech?.name || tech?.email || 'Unknown Technician';
    }
    return `${formData.technicians.length} technicians selected`;
  };

  // Function to generate automatic job number for both Calibration and Armadillo divisions
  const generateJobNumber = async (): Promise<string> => {
    try {
      if (jobDivision === 'calibration') {
        // Calibration format: 1YYXXX (1 + year last 2 digits + 3-digit sequential)
        const currentYear = new Date().getFullYear();
        const yearSuffix = String(currentYear).slice(-2); // e.g., "25" for 2025
        const yearPrefix = `1${yearSuffix}`;
        
        const { data: existingJobs, error } = await supabase
          .schema('lab_ops')
          .from('lab_jobs')
          .select('job_number')
          .like('job_number', `${yearPrefix}%`)
          .order('job_number', { ascending: false });
        
        if (error) {
          console.error('Error fetching existing job numbers:', error);
          return `${yearPrefix}000`; // Fallback to first number
        }
        
        // Find the highest sequential number for this year
        let highestNumber = 0;
        
        if (existingJobs && existingJobs.length > 0) {
          for (const job of existingJobs) {
            if (job.job_number && job.job_number.length === 6) {
              // Extract the last 3 digits
              const sequentialPart = job.job_number.slice(-3);
              const num = parseInt(sequentialPart, 10);
              if (!isNaN(num) && num > highestNumber) {
                highestNumber = num;
              }
            }
          }
        }
        
        // Generate next sequential number
        const nextNumber = highestNumber + 1;
        const formattedNumber = String(nextNumber).padStart(3, '0');
        
        return `${yearPrefix}${formattedNumber}`;
        
      } else if (jobDivision === 'armadillo') {
        // Armadillo format: AS-X (AS + dash + sequential number starting from 1)
        const { data: existingJobs, error } = await supabase
          .schema('lab_ops')
          .from('lab_jobs')
          .select('job_number')
          .like('job_number', 'AS-%')
          .order('job_number', { ascending: false });
        
        if (error) {
          console.error('Error fetching existing Armadillo job numbers:', error);
          return 'AS-1'; // Fallback to first number
        }
        
        // Find the highest sequential number for Armadillo jobs
        let highestNumber = 0;
        
        if (existingJobs && existingJobs.length > 0) {
          for (const job of existingJobs) {
            if (job.job_number && job.job_number.startsWith('AS-')) {
              // Extract the number after "AS-"
              const sequentialPart = job.job_number.substring(3);
              const num = parseInt(sequentialPart, 10);
              if (!isNaN(num) && num > highestNumber) {
                highestNumber = num;
              }
            }
          }
        }
        
        // Generate next sequential number
        const nextNumber = highestNumber + 1;
        
        return `AS-${nextNumber}`;
      }
      
      // If neither calibration nor armadillo, return empty
      return '';
    } catch (error) {
      console.error('Error generating job number:', error);
      // Fallback generation based on division
      if (jobDivision === 'calibration') {
        const currentYear = new Date().getFullYear();
        const yearSuffix = String(currentYear).slice(-2);
        return `1${yearSuffix}000`;
      } else if (jobDivision === 'armadillo') {
        return 'AS-1';
      }
      return '';
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('ðŸ”§ CalibrationJobButton: Submit button clicked - starting job creation process');
    console.log('ðŸ”§ CalibrationJobButton: Component props:', { onJobCreated, buttonText, division });
    
    if (!user?.id) {
      toast({
        title: "Error",
        description: "You must be logged in to create a job",
        variant: "destructive"
      });
      return;
    }

    if (!formData.customer_id) {
      toast({
        title: "Error",
        description: "Please select a customer from the dropdown",
        variant: "destructive"
      });
      return;
    }

    // Additional validation: ensure the selected customer exists in our customer list
    const selectedCustomer = customers.find(c => c.id === formData.customer_id);
    if (!selectedCustomer) {
      toast({
        title: "Error",
        description: "Please select a valid customer from the dropdown",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsSubmitting(true);
      console.log('[CalibrationJobButton] Starting job creation for customer_id:', formData.customer_id);

      // Validate that the selected customer exists in lab_customers
      console.log('[CalibrationJobButton] Checking if customer exists in lab_customers...');
      const { data: customerExists, error: customerCheckError } = await supabase
        .schema('lab_ops')
        .from('lab_customers')
        .select('id, name, company_name')
        .eq('id', formData.customer_id)
        .single();

      console.log('[CalibrationJobButton] Customer check result:', { customerExists, customerCheckError });

      if (customerCheckError || !customerExists) {
        console.log('[CalibrationJobButton] Customer validation failed, attempting to copy from common.customers...');
        
        // Try to get the customer from common.customers
        const { data: commonCustomer, error: commonError } = await supabase
          .schema('common')
          .from('customers')
          .select('*')
          .eq('id', formData.customer_id)
          .single();

        console.log('[CalibrationJobButton] Common customer result:', { commonCustomer, commonError });

        if (commonError || !commonCustomer) {
          console.error('[CalibrationJobButton] Customer not found in either schema');
          throw new Error('Selected customer not found. Please refresh and try again.');
        }

        // Add customer to lab_customers with explicit error handling
        console.log('[CalibrationJobButton] Attempting to insert customer into lab_customers:', {
          id: commonCustomer.id,
          name: commonCustomer.name,
          company_name: commonCustomer.company_name
        });

        const { data: insertedCustomer, error: insertError } = await supabase
          .schema('lab_ops')
          .from('lab_customers')
          .insert({
            id: commonCustomer.id,
            name: commonCustomer.name,
            company_name: commonCustomer.company_name,
            address: commonCustomer.address,
            phone: commonCustomer.phone,
            email: commonCustomer.email,
            status: commonCustomer.status || 'active'
          })
          .select()
          .single();

        console.log('[CalibrationJobButton] Customer insert result:', { insertedCustomer, insertError });

        if (insertError) {
          console.error('[CalibrationJobButton] Failed to insert customer:', insertError);
          
          // Check if it's a duplicate key error (customer already exists)
          if (insertError.code === '23505') {
            console.log('[CalibrationJobButton] Customer already exists, continuing...');
          } else {
            throw new Error(`Failed to set up customer for lab operations: ${insertError.message}`);
          }
        }

        // Double-check that customer now exists in lab_customers
        console.log('[CalibrationJobButton] Verifying customer was added to lab_customers...');
        const { data: verifyCustomer, error: verifyError } = await supabase
          .schema('lab_ops')
          .from('lab_customers')
          .select('id, name, company_name')
          .eq('id', formData.customer_id)
          .single();

        console.log('[CalibrationJobButton] Customer verification result:', { verifyCustomer, verifyError });

        if (verifyError || !verifyCustomer) {
          console.error('[CalibrationJobButton] Customer verification failed after insert');
          throw new Error('Failed to verify customer setup. Please try again.');
        }

        console.log('[CalibrationJobButton] Customer successfully verified in lab_customers');
      } else {
        console.log('[CalibrationJobButton] Customer exists in lab_customers:', customerExists);
      }

      // Let the database trigger handle job number generation
      // This prevents conflicts between JavaScript and database logic
      console.log(`[CalibrationJobButton] Job number will be generated by database trigger for ${jobDivision}`);

      // Create the job - try lab_ops first, fallback to neta_ops if needed
      console.log('[CalibrationJobButton] Creating job with validated customer_id:', formData.customer_id);
      
      // Create job data with only fields that exist in lab_jobs table
      // Explicitly exclude equipment_types, job_type, and technicians to prevent database errors
      const jobData = {
        customer_id: formData.customer_id,
        title: `Project`,
        description: formData.description,
        status: 'pending',
        start_date: formData.start_date || null,
        due_date: formData.due_date || null,
        notes: formData.notes,
        priority: formData.priority,
        division: jobDivision
        // Removed technicians field - not supported in lab_jobs table
        // job_number will be generated by database trigger
      };
      
      // Ensure calibration division uses the historical 125000-style numbering (1YYXXX)
      if (jobDivision === 'calibration') {
        try {
          const proposedNumber = await generateJobNumber();
          (jobData as any).job_number = proposedNumber; // e.g., 125000, 125001, ...
          console.log('[CalibrationJobButton] Assigned calibration job_number:', proposedNumber);
        } catch (e) {
          console.warn('[CalibrationJobButton] Failed to pre-generate calibration job_number, will rely on DB trigger.', e);
        }
      }
      
      // Explicitly remove any equipment_types, job_type, or technicians fields that might have been added
      delete (jobData as any).equipment_types;
      delete (jobData as any).job_type;
      delete (jobData as any).technicians;

      console.log('[CalibrationJobButton] Job data to insert:', jobData);
      console.log('ðŸ”§ CalibrationJobButton: Job data prepared - attempting database insertion');
      console.log('ðŸ”§ CalibrationJobButton: Fields being sent:', Object.keys(jobData));
      console.log('ðŸ”§ CalibrationJobButton: Equipment types in formData:', formData.equipment_types);
      console.log('ðŸ”§ CalibrationJobButton: Equipment types in jobData:', (jobData as any).equipment_types);

      // Try to create job in lab_ops first
      let jobCreationResult;
      try {
        console.log('[CalibrationJobButton] Attempting to create job in lab_ops.lab_jobs...');
        jobCreationResult = await supabase
          .schema('lab_ops')
          .from('lab_jobs')
          .insert(jobData)
          .select()
          .single();

        console.log('[CalibrationJobButton] lab_ops job creation result:', jobCreationResult);
      } catch (labError) {
        console.log('[CalibrationJobButton] lab_ops creation failed, trying neta_ops fallback...', labError);
        
        // Fallback to neta_ops.jobs if lab_ops fails
        try {
          console.log('[CalibrationJobButton] Attempting to create job in neta_ops.jobs...');
          jobCreationResult = await supabase
            .schema('neta_ops')
            .from('jobs')
            .insert(jobData)
            .select()
            .single();

          console.log('[CalibrationJobButton] neta_ops job creation result:', jobCreationResult);
        } catch (netaError) {
          console.error('[CalibrationJobButton] Both lab_ops and neta_ops creation failed:', { labError, netaError });
          jobCreationResult = { data: null, error: netaError || labError };
        }
      }

      const { data, error } = jobCreationResult;

      if (error) {
        console.error('[CalibrationJobButton] Job creation error details:', {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        });
        
        // Provide specific error messages for common issues
        if (error.code === '42501') {
          throw new Error('Permission denied. Please contact your administrator to set up proper database permissions.');
        } else if (error.code === '23503') {
          throw new Error('Customer reference error. The selected customer may not exist in the database. Please refresh and try again.');
        } else if (error.message?.includes('foreign key constraint')) {
          throw new Error('Customer reference error. Please refresh the page and try again.');
        } else if (error.message?.includes('duplicate key')) {
          throw new Error('A job with this information already exists.');
        } else if (error.message?.includes('permission denied')) {
          throw new Error('Database permission error. Please contact your administrator.');
        } else {
          throw new Error(`Job creation failed: ${error.message}`);
        }
      }

      // If we get here, job creation was successful
      const finalData = jobCreationResult.data || data;
      console.log('[CalibrationJobButton] Job created successfully:', finalData);

      toast({
        title: "Success",
        description: `${jobDivision.charAt(0).toUpperCase() + jobDivision.slice(1)} job created successfully!`
      });

      setShowDialog(false);
      setFormData({
        customer_id: '',
        description: '',
        start_date: new Date().toISOString().split('T')[0],
        due_date: '',
        priority: '7-day',
        notes: '',
        job_type: '',
        equipment_types: [] as string[],
        technicians: [] as string[]
      });
      // Job number will be generated by database trigger
      setCustomerSearchQuery(''); // Clear customer search
      setIsCustomerDropdownOpen(false); // Close customer dropdown
      setIsEquipmentDropdownOpen(false); // Close equipment dropdown
      setIsTechnicianDropdownOpen(false); // Close technician dropdown

      if (onJobCreated) {
        onJobCreated();
      }
    } catch (err: any) {
      console.error(`[CalibrationJobButton] Error creating ${jobDivision} job:`, err);
      
      // Show user-friendly error message
      const errorMessage = err.message || `Failed to create ${jobDivision} job`;
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const getButtonColor = () => {
    // Use the current app division context to determine colors
    const accentClasses = getDivisionAccentClasses(appDivision);
    
    if (jobDivision === 'armadillo') {
      return `${accentClasses.bg} ${accentClasses.bgHover} text-white`;
    }
    // For calibration jobs, use division-aware colors
    return `${accentClasses.bg} ${accentClasses.bgHover} text-white`;
  };

  const getDialogTitle = () => {
    return `Create New Project`;
  };

  return (
    <>
      <Button
        onClick={() => setShowDialog(true)}
        className={getButtonColor()}
      >
        <Plus className="h-4 w-4 mr-2" />
        {buttonText}
      </Button>

      <Dialog open={showDialog} onOpenChange={setShowDialog}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>{getDialogTitle()}</DialogTitle>
          </DialogHeader>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">Customer *</label>
                {loading ? (
                  <div className="text-sm">Loading customers...</div>
                ) : customers.length === 0 ? (
                  <div className="text-sm text-red-600">
                    No customers available. Please ensure customers exist in the system.
                  </div>
                ) : (
                  <div className="relative" ref={customerDropdownRef}>
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-500" />
                      <Input
                        type="text"
                        placeholder="Search customers..."
                        value={customerSearchQuery}
                        onChange={handleCustomerSearchChange}
                        onFocus={handleCustomerSearchFocus}
                        onKeyDown={handleCustomerSearchKeyDown}
                        className="pl-10 pr-16 !border-gray-300 dark:!border-gray-600 focus:!ring-[#339C5E] focus:!border-[#339C5E] hover:!border-[#339C5E]"
                      />
                      <div className="absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-1">
                        {formData.customer_id && customers.find(c => c.id === formData.customer_id) && (
                          <span title="Customer selected">
                            <Check className="w-4 h-4 text-green-500" />
                          </span>
                        )}
                        {customerSearchQuery && (
                          <button
                            type="button"
                            onClick={handleClearCustomer}
                            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                            title="Clear selection"
                          >
                            <X className="w-4 h-4" />
                          </button>
                        )}
                        <button
                          type="button"
                          onClick={() => setIsCustomerDropdownOpen(!isCustomerDropdownOpen)}
                          className="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
                          title={isCustomerDropdownOpen ? "Close dropdown" : "Open dropdown"}
                        >
                          {isCustomerDropdownOpen ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />}
                        </button>
                      </div>
                    </div>
                    
                    {isCustomerDropdownOpen && (
                      <div className="absolute z-50 w-full mt-1 bg-white dark:bg-dark-150 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto">
                        {getFilteredCustomers().length === 0 ? (
                          <div className="px-3 py-2 text-sm text-gray-500">
                            {customerSearchQuery ? 'No customers found matching your search' : 'No customers available'}
                          </div>
                        ) : (
                          getFilteredCustomers().map(customer => (
                            <button
                              key={customer.id}
                              type="button"
                              onClick={() => handleCustomerSelect(customer)}
                              className={`w-full text-left px-3 py-2 text-sm hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white transition-colors ${
                                formData.customer_id === customer.id ? 'bg-[#339C5E] text-white' : 'text-gray-900 dark:text-white'
                              }`}
                            >
                              <div className="font-medium">
                                {customer.company_name || customer.name}
                              </div>
                              {customer.company_name && customer.name && customer.company_name !== customer.name && (
                                <div className="text-xs opacity-75">
                                  {customer.name}
                                </div>
                              )}
                            </button>
                          ))
                        )}
                      </div>
                    )}
                  </div>
                )}
              </div>

              {/* Job Number field - read-only for calibration and armadillo divisions */}
              {/* Job number will be generated by database trigger */}

              {/* Job Type field - only for calibration division */}
              {jobDivision === 'calibration' && (
              <div>
                <label className="block text-sm font-medium mb-1">Job Type</label>
                <SelectRoot value={formData.job_type} onValueChange={handleSelectChange('job_type')}>
                  <SelectTrigger className="!border-gray-300 dark:!border-gray-600 hover:!border-[#339C5E] [&[data-state=open]]:!ring-2 [&[data-state=open]]:!ring-[#339C5E] [&[data-state=open]]:!border-[#339C5E] !outline-none focus:!outline-none focus-visible:!outline-none focus-within:!outline-none" style={{ outline: 'none !important', boxShadow: 'none !important' }} onFocus={(e) => { e.currentTarget.style.boxShadow = '0 0 0 2px #339C5E !important'; e.currentTarget.style.outline = 'none !important'; }} onBlur={(e) => { e.currentTarget.style.boxShadow = 'none !important'; }}>
                    <SelectValue placeholder="Select job type..." />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem 
                      value="on-site-truck-testing"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      On-Site | Truck Testing/Inspection
                    </SelectItem>
                    <SelectItem 
                      value="on-site-ppe-testing"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      On-Site | PPE Testing
                    </SelectItem>
                    <SelectItem 
                      value="in-lab-ppe-testing"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      In-Lab | PPE Testing
                    </SelectItem>
                    <SelectItem 
                      value="in-lab-repair"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      In-Lab | Repair
                    </SelectItem>
                    <SelectItem 
                      value="on-site-calibration"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      On-Site | Calibration
                    </SelectItem>
                    <SelectItem 
                      value="in-lab-calibration"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      In-Lab | Calibration
                    </SelectItem>
                    <SelectItem 
                      value="armadillo"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      Armadillo
                    </SelectItem>
                  </SelectContent>
                </SelectRoot>
              </div>
              )}

              {/* Equipment Types field - only for calibration division */}
              {jobDivision === 'calibration' && (
              <div className="md:col-span-2">
                <label className="block text-sm font-medium mb-1">Equipment Types</label>
                <div className="relative" ref={equipmentDropdownRef}>
                  <button
                    type="button"
                    onClick={() => setIsEquipmentDropdownOpen(!isEquipmentDropdownOpen)}
                    className="w-full px-3 py-2 text-left bg-white dark:bg-dark-100 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[#339C5E] focus:border-[#339C5E] hover:border-[#339C5E] dark:text-white"
                  >
                    <span className={formData.equipment_types.length === 0 ? 'text-gray-500' : ''}>
                      {getEquipmentTypesDisplay()}
                    </span>
                    <ChevronDown className={`absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-500 transition-transform ${isEquipmentDropdownOpen ? 'rotate-180' : ''}`} />
                  </button>
                  
                  {isEquipmentDropdownOpen && (
                    <div className="absolute z-50 w-full mt-1 bg-white dark:bg-dark-150 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto">
                      {equipmentTypes.map(equipmentType => (
                        <label
                          key={equipmentType}
                          className="flex items-center px-3 py-2 hover:bg-[#339C5E] hover:text-white cursor-pointer transition-colors"
                        >
                          <input
                            type="checkbox"
                            checked={formData.equipment_types.includes(equipmentType)}
                            onChange={() => handleEquipmentTypeToggle(equipmentType)}
                            className="mr-2 text-[#339C5E] focus:ring-[#339C5E] border-gray-300 rounded"
                          />
                          <span className="text-sm">{equipmentType}</span>
                        </label>
                      ))}
                      {formData.equipment_types.length > 0 && (
                        <div className="border-t border-gray-200 dark:border-gray-600 p-2">
                          <button
                            type="button"
                            onClick={() => setFormData(prev => ({ ...prev, equipment_types: [] as string[] }))}
                            className="text-xs text-gray-500 hover:text-[#339C5E] transition-colors"
                          >
                            Clear all selections
                          </button>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
              )}

              {/* Technicians field */}
              <div className="md:col-span-2">
                <label className="block text-sm font-medium mb-1">Technicians</label>
                <div className="relative" ref={technicianDropdownRef}>
                  <button
                    type="button"
                    onClick={() => setIsTechnicianDropdownOpen(!isTechnicianDropdownOpen)}
                    className="w-full px-3 py-2 text-left bg-white dark:bg-dark-100 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[#339C5E] focus:border-[#339C5E] hover:border-[#339C5E] dark:text-white"
                  >
                    <span className={formData.technicians.length === 0 ? 'text-gray-500' : ''}>
                      {getTechniciansDisplay()}
                    </span>
                    <ChevronDown className={`absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-500 transition-transform ${isTechnicianDropdownOpen ? 'rotate-180' : ''}`} />
                  </button>
                  
                  {isTechnicianDropdownOpen && (
                    <div className="absolute z-50 w-full mt-1 bg-white dark:bg-dark-150 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto">
                      {technicians.length === 0 ? (
                        <div className="px-3 py-2 text-sm text-gray-500">
                          No technicians available
                        </div>
                      ) : (
                        <>
                          {/* Select All option */}
                          <label className="flex items-center px-3 py-2 hover:bg-[#339C5E] hover:text-white cursor-pointer transition-colors border-b border-gray-200 dark:border-gray-600">
                            <input
                              type="checkbox"
                              checked={technicians.length > 0 && technicians.every(tech => formData.technicians.includes(tech.id))}
                              onChange={handleSelectAllTechnicians}
                              className="mr-2 text-[#339C5E] focus:ring-[#339C5E] border-gray-300 rounded"
                            />
                            <span className="text-sm font-medium">Select All</span>
                          </label>
                          
                          {/* Individual technicians */}
                          {technicians.map(technician => (
                            <label
                              key={technician.id}
                              className="flex items-center px-3 py-2 hover:bg-[#339C5E] hover:text-white cursor-pointer transition-colors"
                            >
                              <input
                                type="checkbox"
                                checked={formData.technicians.includes(technician.id)}
                                onChange={() => handleTechnicianToggle(technician.id)}
                                className="mr-2 text-[#339C5E] focus:ring-[#339C5E] border-gray-300 rounded"
                              />
                              <span className="text-sm">{technician.name || technician.email}</span>
                            </label>
                          ))}
                        </>
                      )}
                      {formData.technicians.length > 0 && (
                        <div className="border-t border-gray-200 dark:border-gray-600 p-2">
                          <button
                            type="button"
                            onClick={() => setFormData(prev => ({ ...prev, technicians: [] as string[] }))}
                            className="text-xs text-gray-500 hover:text-[#339C5E] transition-colors"
                          >
                            Clear all selections
                          </button>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>

              <div className="md:col-span-2">
                <label className="block text-sm font-medium mb-1">Description</label>
                <Textarea
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  placeholder={`Describe the ${jobDivision} work to be performed...`}
                  rows={3}
                  className="!border-gray-300 dark:!border-gray-600 focus:!ring-[#339C5E] focus:!border-[#339C5E] hover:!border-[#339C5E]"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">Start Date</label>
                <Input
                  type="date"
                  name="start_date"
                  value={formData.start_date}
                  onChange={handleInputChange}
                  className="!border-gray-300 dark:!border-gray-600 focus:!ring-[#339C5E] focus:!border-[#339C5E] hover:!border-[#339C5E]"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">Due Date</label>
                <Input
                  type="date"
                  name="due_date"
                  value={formData.due_date}
                  onChange={handleInputChange}
                  className="!border-gray-300 dark:!border-gray-600 focus:!ring-[#339C5E] focus:!border-[#339C5E] hover:!border-[#339C5E]"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">Priority</label>
                <SelectRoot value={formData.priority} onValueChange={handleSelectChange('priority')}>
                  <SelectTrigger className="!border-gray-300 dark:!border-gray-600 hover:!border-[#339C5E] [&[data-state=open]]:!ring-2 [&[data-state=open]]:!ring-[#339C5E] [&[data-state=open]]:!border-[#339C5E] !outline-none focus:!outline-none focus-visible:!outline-none focus-within:!outline-none" style={{ outline: 'none !important', boxShadow: 'none !important' }} onFocus={(e) => { e.currentTarget.style.boxShadow = '0 0 0 2px #339C5E !important'; e.currentTarget.style.outline = 'none !important'; }} onBlur={(e) => { e.currentTarget.style.boxShadow = 'none !important'; }}>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem 
                      value="7-day"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      7-Day
                    </SelectItem>
                    <SelectItem 
                      value="3-day"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      3-Day
                    </SelectItem>
                    <SelectItem 
                      value="2-day"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      2 day
                    </SelectItem>
                    <SelectItem 
                      value="same-day"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      Same-Day
                    </SelectItem>
                    <SelectItem 
                      value="on-site"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      On-Site
                    </SelectItem>
                    <SelectItem 
                      value="1-month"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      1-Month
                    </SelectItem>
                    <SelectItem 
                      value="1-day"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      1-Day
                    </SelectItem>
                    <SelectItem 
                      value="14-day"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      14 Day
                    </SelectItem>
                    <SelectItem 
                      value="6-month"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      6 - Month
                    </SelectItem>
                    <SelectItem 
                      value="5-day"
                      className="hover:bg-[#339C5E] hover:text-white focus:bg-[#339C5E] focus:text-white data-[highlighted]:bg-[#339C5E] data-[highlighted]:text-white !outline-none"
                      style={{ outline: 'none !important' }}
                      onMouseEnter={(e) => { e.currentTarget.style.backgroundColor = '#339C5E !important'; e.currentTarget.style.color = 'white !important'; }}
                      onMouseLeave={(e) => { e.currentTarget.style.backgroundColor = ''; e.currentTarget.style.color = ''; }}
                    >
                      5-Day
                    </SelectItem>
                  </SelectContent>
                </SelectRoot>
              </div>

              <div className="md:col-span-2">
                <label className="block text-sm font-medium mb-1">Notes</label>
                <Textarea
                  name="notes"
                  value={formData.notes}
                  onChange={handleInputChange}
                  placeholder="Additional notes or special requirements..."
                  rows={3}
                  className="!border-gray-300 dark:!border-gray-600 focus:!ring-[#339C5E] focus:!border-[#339C5E] hover:!border-[#339C5E]"
                />
              </div>
            </div>

            <div className="flex justify-end space-x-2 pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => setShowDialog(false)}
                className="flex items-center bg-white dark:bg-gray-700 border-[#339C5E] hover:bg-[#339C5E]/10 hover:text-[#339C5E] dark:hover:bg-[#339C5E]/20"
              >
                Cancel
              </Button>
              <Button
                type="submit"
                disabled={isSubmitting || customers.length === 0 || !formData.customer_id}
                className={getButtonColor()}
              >
                {isSubmitting ? 'Creating...' : 'Create'}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>
    </>
  );
}

export default CalibrationJobButton; 